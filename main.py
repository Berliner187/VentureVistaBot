#!/usr/bin/env python3
import json
import os
import time

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Float, Sequence
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

import stock_manager
import private.manage_users as manage_users
import public.manage_companies as manage_companies


__version__ = '0.0.2.0'


os.system('clear')
print('=============== BOT aiogram START ===================')
print(f'---------------- {__version__} ---------------------')
print("""
     _  _  ____  _  _  ____  __  __  ____  ____    _  _  ____  ___  ____   __   
    ( \/ )( ___)( \( )(_  _)(  )(  )(  _ \( ___)  ( \/ )(_  _)/ __)(_  _) /__\  
     \  /  )__)  )  (   )(   )(__)(  )   / )__)    \  /  _)(_ \__ \  )(  /(__)\ 
      \/  (____)(_)\_) (__) (______)(_)\_)(____)    \/  (____)(___/ (__)(__)(__)
""")
print('==================== Venture Vista ==================')


### --- DEV PROGRAM INFO ---
DEBUG = True


## –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API
try:
    with open('config.json') as config_file:
        _config = json.load(config_file)
    API_TOKEN = _config["telegram_token"]
    admin_user_id = _config["admin_id"]
except Exception as e:
    API_TOKEN = None
    print("–û–®–ò–ë–ö–ê –ø—Ä–∏ –ß–¢–ï–ù–ò–ò —Ç–æ–∫–µ–Ω–∞ –¢–ï–õ–ï–ì–†–ê–ú", e)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# dp.middleware.setup(LoggingMiddleware())


# ============================================================================
# ======================== –ë–ê–ó–´ –î–ê–ù–ù–´–• =====================
# ------------------------- –ö–û–ú–ü–ê–ù–ò–ò -----------------------
engine = create_engine(f'sqlite:///companies.db', echo=False)
Base = declarative_base()

Session = sessionmaker(bind=engine)
session_companies = Session()

# ------------------ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò -----------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine_users = create_engine(f'sqlite:///private/users.db', echo=False)
DataBaseUsers = declarative_base()

SessionUsers = sessionmaker(bind=engine_users)
session_users = SessionUsers()


# ============================================================================
# ------------------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ -------------------------
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    wait_message = await message.answer(
        "<b>/// –ó–ê–ü–£–°–ö...\n\n"
        "/// DESIGN by </b>KOZAK\n",
        parse_mode='HTML'
    )

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    # manage_users.check_user_in_db(user_id=user_id, first_name=first_name, last_name=last_name, username=username)

    kb = [
        [
            types.KeyboardButton(text="üìà–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫"),
        ],
        [
            types.KeyboardButton(text="üëõ–ë—É–º–∞–∂–Ω–∏–∫"),
            types.KeyboardButton(text="üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await wait_message.delete()

    url_kb = InlineKeyboardMarkup(row_width=3)
    url_1 = InlineKeyboardButton(text='‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/schneller_los')
    url_2 = InlineKeyboardButton(text='üîõ–ü—Ä–æ–º–æ', url='https://dribbble.com/kozak_developer')
    url_kb.add(url_1)
    url_kb.add(url_2)

    await message.answer(
        "<b>Venture</b> <i>Vista</i>.\n\n",
        reply_markup=keyboard, parse_mode='HTML')

    existing_user = session_users.query(manage_users.User).filter_by(user_id=user_id).first()

    if existing_user is not None:
        pass
    else:
        print(f"/// NEW USER: {user_id} ///")
        new_user = manage_users.User(user_id=user_id, first_name=first_name, last_name=last_name, username=username)
        personal_account = manage_users.PersonalAccount(user_id, 1000, 'RST', 'Bonus')
        session_users.add(new_user)
        session_users.add(personal_account)
        session_users.commit()

        await message.answer(
            f"<b>–í–∞—à —Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {AVAILABLE_CURRENCY['RST']}1,000 ‚úÖ</b>.\n\n"
            f"–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text='üè†–ì–ª–∞–≤–Ω–∞—è')
@dp.message_handler(commands=['menu'])
async def main_func(message: types.Message):
    btn = [
        [
            types.KeyboardButton(text="üìà–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
        ],
        [
            types.KeyboardButton(text="üè†–ì–ª–∞–≤–Ω–∞—è"),
            types.KeyboardButton(text="üëõ–ë—É–º–∞–∂–Ω–∏–∫"),
            types.KeyboardButton(text="üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å"),
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        "–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π", reply_markup=keyboard, parse_mode='HTML')


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class StockMarketState(StatesGroup):
    InStockMarket = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫
    SentMessageId = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    WaitingForAmount = State()
    ConfirmPurchase = State()


class CompanyInfoState(StatesGroup):
    ChoosingCompany = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –û –∫–æ–º–ø–∞–Ω–∏–∏


async def update_message(message: types.Message, new_text: str, keyboard):
    await message.edit_text(new_text, reply_markup=keyboard, parse_mode='HTML')


def template_stock_market_message(_market_status):
    return f"<b>üìà –§–û–ù–î–û–í–´–ô –†–´–ù–û–ö üìà</b>\n\n{_market_status}"


# ------- –ö–û–ù–°–¢–ê–ù–¢–´ -----------
AVAILABLE_CURRENCY = {
    "RST": "Œ£"
}


LAST_MESSAGE_STOCK_EX_BOT, LAST_MESSAGE_STOCK_EX_USER = {}, {}


# –ú–ï–•–ê–ù–ò–ó–ú –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø (–ò–ú–ò–¢–ê–¶–ò–Ø –ú–ï–ù–Æ)
async def delete_messages(message):
    try:
        if LAST_MESSAGE_STOCK_EX_USER.get(message.from_user.id):
            await bot.delete_message(message.chat.id, LAST_MESSAGE_STOCK_EX_USER[message.from_user.id])
        if LAST_MESSAGE_STOCK_EX_BOT.get(message.from_user.id):
            await bot.delete_message(message.chat.id, LAST_MESSAGE_STOCK_EX_BOT[message.from_user.id])
    except Exception:
        pass


async def drop_message(message: types.Message, sent_message):
    LAST_MESSAGE_STOCK_EX_USER[message.from_user.id] = sent_message.message_id
    LAST_MESSAGE_STOCK_EX_BOT[message.from_user.id] = message.message_id


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def timing_decorator(func):
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        print(f"{func.__name__} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ {end_time - start_time} —Å–µ–∫—É–Ω–¥")
        return result
    return wrapper


@dp.message_handler(text='üìà–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫')
async def stock_market_main(message: types.Message):
    await delete_messages(message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ –∏ –∫–Ω–æ–ø–æ–∫
    market_status = await stock_manager.get_stock_exchange_info()
    keyboard = InlineKeyboardMarkup()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    for company in market_status["data_companies"]:
        company_info_button = InlineKeyboardButton(text=company, callback_data=f"company_{company}")
        keyboard.add(company_info_button)

    sent_message = await bot.send_message(
        message.from_user.id, template_stock_market_message(market_status['text_info']),
        reply_markup=keyboard, parse_mode='HTML')

    await drop_message(message, sent_message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda callback: callback.data.startswith('company_'))
async def process_company_button(callback_query: types.CallbackQuery):
    market_prices = await stock_manager.get_actual_prices()

    selected_company = callback_query.data.split('_')[1]

    company = session_companies.query(manage_companies.Company).filter_by(name=selected_company).first()
    description = company.description
    current_price = company.current_price

    keyboard = InlineKeyboardMarkup(row_width=2)
    buy_button = InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{selected_company}")
    sell_button = InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{selected_company}")
    # back_btn = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫')
    keyboard.add(buy_button, sell_button)

    current_price = round(current_price, 2)
    day_max = round(market_prices[selected_company]['day_max'], 2)
    day_min = round(market_prices[selected_company]['day_min'], 2)

    day_start_price = market_prices[selected_company]['day_start_price']
    delta_day_start_price = round(current_price - day_start_price, 2)
    delta_day_start_price_percent = round(100 - day_start_price * 100 / current_price, 2)

    indicators = ''
    if delta_day_start_price > 0:
        indicators += f'+{delta_day_start_price}üü©  (+{delta_day_start_price_percent}%)'
    elif delta_day_start_price == 0:
        indicators += f'{delta_day_start_price}üü®  ({delta_day_start_price_percent}%)'
    else:
        indicators += f'{delta_day_start_price}üü•  ({delta_day_start_price_percent}%)'

    await bot.send_message(
            callback_query.from_user.id,
            f"<b>–û –∫–æ–º–ø–∞–Ω–∏–∏ {selected_company}</b>\n\n"
            f"{description}\n\n"
            f"<b>{current_price}</b>  {indicators}\n"
            f"{day_max}‚¨ÜÔ∏è  {day_min}‚¨áÔ∏è",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


SELECTED_COMPANY = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("buy_"))
async def process_buy_button(callback_query: types.CallbackQuery):
    btn = [
        [
            types.KeyboardButton(text="üìà–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
        ],
        [
            types.KeyboardButton(text="üè†–ì–ª–∞–≤–Ω–∞—è"),
            types.KeyboardButton(text="üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å"),
            types.KeyboardButton(text="üëõ–ë—É–º–∞–∂–Ω–∏–∫"),
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True, one_time_keyboard=True)

    selected_company = callback_query.data.split("_")[1]
    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–ø–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∑–¥–µ—Å—å
    SELECTED_COMPANY[callback_query.from_user.id] = selected_company

    await bot.send_message(
        callback_query.from_user.id,
        f"–°–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π {selected_company} –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?",
        reply_markup=keyboard, parse_mode='HTML'
    )
    await StockMarketState.WaitingForAmount.set()


@dp.message_handler(state=StockMarketState.WaitingForAmount)
async def process_amount_input(message: types.Message, state: FSMContext):
    try:
        # count - –æ–Ω –∂–µ quantity - –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        company = session_companies.query(manage_companies.Company).filter_by(name=SELECTED_COMPANY[message.from_user.id]).first()
        current_price = company.current_price
        ticker = company.ticker

        quantity = int(message.text)
        message_user_id = message.from_user.id

        personal_account = session_users.query(manage_users.PersonalAccount).filter_by(user_id=message_user_id).first()
        currency = personal_account.currency

        if personal_account.balance >= current_price * quantity:
            personal_account.balance -= current_price * quantity

            exist_company = session_users.query(manage_users.Portfolio).filter_by(ticker=ticker).first()

            if exist_company:
                print('///// –ü–û–ü–ê–õ ////////')
                # TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                average_price = round(exist_company.purchase_amount * exist_company.count) + (current_price * quantity)
                exist_company.count += quantity
                exist_company.purchase_amount = average_price
            else:
                new_transaction = manage_users.Portfolio(message_user_id, 'buy', ticker, current_price, quantity, 'RST')
                session_users.add(new_transaction)

            session_users.commit()

            await message.answer(
                f"<b>–£—Å–ø–µ—à–Ω–æ ‚úÖ</b>\n\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}\n\n"
                f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}</i>\n"
                f"<i>–°—É–º–º–∞: {round(current_price * quantity, 2)} {AVAILABLE_CURRENCY[currency]}</i>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {round(personal_account.balance, 2)} {AVAILABLE_CURRENCY[currency]}",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ üö´</b>\n\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {round(personal_account.balance, 2)} {AVAILABLE_CURRENCY[currency]}",
                parse_mode='HTML'
            )

        await state.finish()
        SELECTED_COMPANY[message.from_user.id] = None
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π.")


@dp.message_handler(text='üíº–ü–æ—Ä—Ç—Ñ–µ–ª—å')
async def process_buy_button(message: types.Message):
    personal_account = session_users.query(manage_users.Portfolio).filter_by(user_id=message.from_user.id)
    print(personal_account)
    # personal_account


@dp.message_handler(text='üëõ–ë—É–º–∞–∂–Ω–∏–∫')
async def process_buy_button(message: types.Message):
    pass


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
