#!/usr/bin/env python3
import json
import os
from datetime import time
from csv import DictWriter, DictReader
import datetime
import re


import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InputFile
from aiogram import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import numpy as np
from aiogram.types import CallbackQuery

import schedule

import invest_engine
import private.manage_users as manage_users


__version__ = '0.0.1.0'


os.system('clear')
print('=============== BOT aiogram START ===================')
print(f'---------------- {__version__} ---------------------')
print("""
     _  _  ____  _  _  ____  __  __  ____  ____    _  _  ____  ___  ____   __   
    ( \/ )( ___)( \( )(_  _)(  )(  )(  _ \( ___)  ( \/ )(_  _)/ __)(_  _) /__\  
     \  /  )__)  )  (   )(   )(__)(  )   / )__)    \  /  _)(_ \__ \  )(  /(__)\ 
      \/  (____)(_)\_) (__) (______)(_)\_)(____)    \/  (____)(___/ (__)(__)(__)
""")
print('==================== Venture Vista ==================')


### --- DEV PROGRAM INFO ---
DEBUG = True


## –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API
try:
    with open('config.json') as config_file:
        _config = json.load(config_file)
    API_TOKEN = _config["telegram_token"]
    admin_user_id = _config["admin_id"]
except Exception as e:
    API_TOKEN = None
    print("–û–®–ò–ë–ö–ê –ø—Ä–∏ –ß–¢–ï–ù–ò–ò —Ç–æ–∫–µ–Ω–∞ –¢–ï–õ–ï–ì–†–ê–ú", e)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# dp.middleware.setup(LoggingMiddleware())


# ============================================================================
# ------------------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ -------------------------
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    wait_message = await message.answer(
        "<b>/// –ó–ê–ü–£–°–ö...\n\n"
        "/// DESIGN by </b>KOZAK\n",
        parse_mode='HTML'
    )

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    print(user_id, first_name, last_name, username)
    manage_users.check_user_in_db(user_id=user_id, first_name=first_name, last_name=last_name, username=username)

    kb = [
        [
            types.KeyboardButton(text="–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫"),
        ],
        [
            types.KeyboardButton(text="–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"),
            types.KeyboardButton(text="–ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    # await bot.send_photo(
    #     message.from_user.id, photo=InputFile('img/menu.png', filename='start_message.png'), reply_markup=keyboard)
    await wait_message.delete()

    url_kb = InlineKeyboardMarkup(row_width=3)
    url_1 = InlineKeyboardButton(text='‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/schneller_los')
    url_2 = InlineKeyboardButton(text='üîõ–ü—Ä–æ–º–æ', url='https://dribbble.com/kozak_developer')
    url_kb.add(url_1)
    url_kb.add(url_2)

    await message.answer(
        "<b>Venture</b> <i>Vista</i>.\n\n",
        reply_markup=url_kb, parse_mode='HTML')


@dp.message_handler(text='–ì–ª–∞–≤–Ω–∞—è')
@dp.message_handler(commands=['menu'])
async def main_func(message: types.Message):
    btn = [
        [
            types.KeyboardButton(text="–ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã"),
            types.KeyboardButton(text="–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
        ],
        [
            types.KeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        "–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π", reply_markup=keyboard, parse_mode='HTML')


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class StockMarketState(StatesGroup):
    InStockMarket = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫
    SentMessageId = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    WaitingForAmount = State()


class CompanyInfoState(StatesGroup):
    ChoosingCompany = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –û –∫–æ–º–ø–∞–Ω–∏–∏


class StateWorkStockExchange(StatesGroup):
    pass


async def update_message(message: types.Message, new_text: str, keyboard):
    await message.edit_text(new_text, reply_markup=keyboard, parse_mode='HTML')


def template_stock_market_message(_market_status):
    return f"<b>–§–û–ù–î–û–í–´–ô –†–´–ù–û–ö</b>\n\n{_market_status}"


USER_STATE = {}
work_status = "work_status"


@dp.message_handler(text='–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫')
async def stock_market_start(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)

    # –í—Ö–æ–¥ –≤ —Ä—ã–Ω–æ—á–Ω–æ–µ –º–µ–Ω—é: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è StockMarketState.InStockMarket
    await StockMarketState.InStockMarket.set()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ –∏ –∫–Ω–æ–ø–æ–∫
    market_status = await invest_engine.get_market_info()
    keyboard = InlineKeyboardMarkup()
    for company in market_status["data_companies"]:
        button_text = f"{company[0]}"
        company_info_button = InlineKeyboardButton(text=button_text, callback_data=f"company_{company[0]}")
        keyboard.add(company_info_button)

    sent_message = await bot.send_message(
        message.from_user.id, template_stock_market_message(market_status['text_info']),
        reply_markup=keyboard, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("company_"), state=StockMarketState.InStockMarket)
async def handle_company_info(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_name = callback_query.data.split("_")[1]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    company_keyboard = InlineKeyboardMarkup()
    buy_button = InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_{company_name}")
    sell_button = InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{company_name}")
    company_keyboard.add(buy_button, sell_button)

    await bot.send_message(
        callback_query.from_user.id,
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}\n\n",
        reply_markup=company_keyboard,
    )


# –î–∞–ª–µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ö—É–ø–∏—Ç—å" –∏ "–ü—Ä–æ–¥–∞—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("buy_"), state=StockMarketState.InStockMarket)
async def handle_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_name = callback_query.data.split("_")[1]
    await bot.send_message(callback_query.from_user.id, f"–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}?")
    await StockMarketState.WaitingForAmount.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("sell_"), state=StockMarketState.InStockMarket)
async def handle_sell_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_name = callback_query.data.split("_")[1]
    await bot.send_message(callback_query.from_user.id, f"–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}?")


@dp.message_handler(lambda message: not message.text.isdigit(), state=StockMarketState.WaitingForAmount)
async def handle_invalid_input(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    print(message)
    return


@dp.message_handler(lambda message: message.text.isdigit(), state=StockMarketState.WaitingForAmount)
async def handle_amount_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        company_name = data['company_name']
        print(f'\n{company_name}\n')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    amount = int(message.text)
    print(amount)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ `company_name` –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ `amount`

    await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {amount} –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ BuyStockState
    await state.finish()


# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text not in {'–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫'}, state=StockMarketState.InStockMarket)
async def exit_stock_market(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sent_message_id = data.get('sent_message_id')

    if sent_message_id:
        await bot.delete_message(message.from_user.id, sent_message_id)

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
