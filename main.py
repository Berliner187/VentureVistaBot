#!/usr/bin/env python3
import json
import os
import time

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import stock_manager
import private.manage_users as manage_users


__version__ = '0.0.1.1'


os.system('clear')
print('=============== BOT aiogram START ===================')
print(f'---------------- {__version__} ---------------------')
print("""
     _  _  ____  _  _  ____  __  __  ____  ____    _  _  ____  ___  ____   __   
    ( \/ )( ___)( \( )(_  _)(  )(  )(  _ \( ___)  ( \/ )(_  _)/ __)(_  _) /__\  
     \  /  )__)  )  (   )(   )(__)(  )   / )__)    \  /  _)(_ \__ \  )(  /(__)\ 
      \/  (____)(_)\_) (__) (______)(_)\_)(____)    \/  (____)(___/ (__)(__)(__)
""")
print('==================== Venture Vista ==================')


### --- DEV PROGRAM INFO ---
DEBUG = True


## –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API
try:
    with open('config.json') as config_file:
        _config = json.load(config_file)
    API_TOKEN = _config["telegram_token"]
    admin_user_id = _config["admin_id"]
except Exception as e:
    API_TOKEN = None
    print("–û–®–ò–ë–ö–ê –ø—Ä–∏ –ß–¢–ï–ù–ò–ò —Ç–æ–∫–µ–Ω–∞ –¢–ï–õ–ï–ì–†–ê–ú", e)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# dp.middleware.setup(LoggingMiddleware())


# ============================================================================
# ------------------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ -------------------------
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    wait_message = await message.answer(
        "<b>/// –ó–ê–ü–£–°–ö...\n\n"
        "/// DESIGN by </b>KOZAK\n",
        parse_mode='HTML'
    )

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    print(user_id, first_name, last_name, username)
    manage_users.check_user_in_db(user_id=user_id, first_name=first_name, last_name=last_name, username=username)

    kb = [
        [
            types.KeyboardButton(text="–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫"),
        ],
        [
            types.KeyboardButton(text="–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"),
            types.KeyboardButton(text="–ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    # await bot.send_photo(
    #     message.from_user.id, photo=InputFile('img/menu.png', filename='start_message.png'), reply_markup=keyboard)
    await wait_message.delete()

    url_kb = InlineKeyboardMarkup(row_width=3)
    url_1 = InlineKeyboardButton(text='‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/schneller_los')
    url_2 = InlineKeyboardButton(text='üîõ–ü—Ä–æ–º–æ', url='https://dribbble.com/kozak_developer')
    url_kb.add(url_1)
    url_kb.add(url_2)

    await message.answer(
        "<b>Venture</b> <i>Vista</i>.\n\n",
        reply_markup=url_kb, parse_mode='HTML')


@dp.message_handler(text='–ì–ª–∞–≤–Ω–∞—è')
@dp.message_handler(commands=['menu'])
async def main_func(message: types.Message):
    btn = [
        [
            types.KeyboardButton(text="–ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã"),
            types.KeyboardButton(text="–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
        ],
        [
            types.KeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        "–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π", reply_markup=keyboard, parse_mode='HTML')


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class StockMarketState(StatesGroup):
    InStockMarket = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫
    SentMessageId = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    WaitingForAmount = State()


class CompanyInfoState(StatesGroup):
    ChoosingCompany = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –û –∫–æ–º–ø–∞–Ω–∏–∏


class StateWorkStockExchange(StatesGroup):
    pass


async def update_message(message: types.Message, new_text: str, keyboard):
    await message.edit_text(new_text, reply_markup=keyboard, parse_mode='HTML')


def template_stock_market_message(_market_status):
    return f"<b>–§–û–ù–î–û–í–´–ô –†–´–ù–û–ö</b>\n\n{_market_status}"


LAST_MESSAGE_STOCK_EX_BOT, LAST_MESSAGE_STOCK_EX_USER = {}, {}


# –ú–ï–•–ê–ù–ò–ó–ú –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø (–ò–ú–ò–¢–ê–¶–ò–Ø –ú–ï–ù–Æ)
async def delete_messages(message):
    try:
        if LAST_MESSAGE_STOCK_EX_USER.get(message.from_user.id):
            await bot.delete_message(message.chat.id, LAST_MESSAGE_STOCK_EX_USER[message.from_user.id])
        if LAST_MESSAGE_STOCK_EX_BOT.get(message.from_user.id):
            await bot.delete_message(message.chat.id, LAST_MESSAGE_STOCK_EX_BOT[message.from_user.id])
    except Exception:
        pass


async def drop_message(message: types.Message, sent_message):
    LAST_MESSAGE_STOCK_EX_USER[message.from_user.id] = sent_message.message_id
    LAST_MESSAGE_STOCK_EX_BOT[message.from_user.id] = message.message_id


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def timing_decorator(func):
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        print(f"{func.__name__} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ {end_time - start_time} —Å–µ–∫—É–Ω–¥")
        return result
    return wrapper


@dp.message_handler(text='–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫')
async def stock_market_start(message: types.Message):
    await delete_messages(message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ –∏ –∫–Ω–æ–ø–æ–∫
    market_status = await stock_manager.get_stock_exchange_info()
    keyboard = InlineKeyboardMarkup()
    print(market_status["data_companies"])

    # response_of_indicators = await stock_manager.get_stock_exchange_info()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    for company in market_status["data_companies"]:
        company_info_button = InlineKeyboardButton(text=company, callback_data=f"company_{company}")
        keyboard.add(company_info_button)

    sent_message = await bot.send_message(
        message.from_user.id, template_stock_market_message(market_status['text_info']),
        reply_markup=keyboard, parse_mode='HTML')

    await drop_message(message, sent_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
def get_company_info_text(selected_company):
    return f"<b>{selected_company}</b>\n\n" \
           f""


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda callback: callback.data.startswith('company_'))
async def process_company_button(callback_query: types.CallbackQuery):
    selected_company = callback_query.data.split('_')[1]
    print(selected_company)

    new_message_text = get_company_info_text(selected_company)

    await bot.send_message(
        callback_query.from_user.id,
        new_message_text,
        parse_mode='HTML'
    )

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


# –î–∞–ª–µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ö—É–ø–∏—Ç—å" –∏ "–ü—Ä–æ–¥–∞—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("buy_"), state=StockMarketState.InStockMarket)
async def handle_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_name = callback_query.data.split("_")[1]
    await bot.send_message(callback_query.from_user.id, f"–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}?")
    await StockMarketState.WaitingForAmount.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("sell_"), state=StockMarketState.InStockMarket)
async def handle_sell_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_name = callback_query.data.split("_")[1]
    await bot.send_message(callback_query.from_user.id, f"–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}?")


@dp.message_handler(lambda message: not message.text.isdigit(), state=StockMarketState.WaitingForAmount)
async def handle_invalid_input(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    print(message)
    return


@dp.message_handler(lambda message: message.text.isdigit(), state=StockMarketState.WaitingForAmount)
async def handle_amount_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        company_name = data['company_name']
        print(f'\n{company_name}\n')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    amount = int(message.text)
    print(amount)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ `company_name` –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ `amount`

    await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {amount} –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ BuyStockState
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
